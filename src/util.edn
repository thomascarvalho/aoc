{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dsFyABwwxsyNFdFwaN9Vat3KiSE8A"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns util), :file "src/util.clj", :scope util, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/thomascarvalho/aoc/blob/b653d21ed1d9ab60a7c72799308fed1c4731c81e/src/util.clj"} "src/util.clj" [:<> "@" [:span.tabular-nums "b653d21"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5dtFMoRpfSur3BJ5RKN8sHB4mECYMZ"}}, :open-graph {:type "article:clerk", :title nil, :description "Like the core time macro, but rather than printing the elapsed time it returns a list of (result, time). Returned value is in milliseconds."}, :blocks [{:path [], :nextjournal/value [{:path [0], :nextjournal/value "(ns util\n  (:require [clj-http.client :as client]\n            [clojure.string :as str]\n            [hickory.core :as h]\n            [nextjournal.clerk :as clerk]\n            [ubergraph.core :as uber]\n            [hickory.render :as hr]\n            [hiccup2.core :as hi]\n            [hickory.select :as s]\n            [clojure.pprint :refer [pprint]]\n            [babashka.fs :as fs]\n            [instaparse.core :as insta]))", :nextjournal/render-opts {:loc {:line 1, :end-line 12, :column 1, :end-column 42}, :id "util/anon-expr-5drXY2kaXm9t8PqjwmRd5VcfajFwCx-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn to-blocks\n  \"Turn a blob (probably from `slurp`) into a seq of blocks\"\n  [input]\n  (str/split input #\"\\n\\n\"))", :nextjournal/render-opts {:loc {:line 14, :end-line 17, :column 1, :end-column 29}, :id "util/to-blocks-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$to_blocks 0x8d20dc4 \"util$to_blocks@8d20dc4\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/to-blocks-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/to-blocks-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn to-lines\n  \"Turn a blob or block into a seq of lines\"\n  [input]\n  (str/split-lines input))", :nextjournal/render-opts {:loc {:line 19, :end-line 22, :column 1, :end-column 27}, :id "util/to-lines-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$to_lines 0x3af1fd55 \"util$to_lines@3af1fd55\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/to-lines-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/to-lines-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn to-matrix\n  \"Turn a blob (or block) into a vector of vectors\"\n  ([input]\n   (to-matrix identity input))\n  ([transform input]\n   (->> input\n        to-lines\n        (mapv #(mapv transform (vec %))))))", :nextjournal/render-opts {:loc {:line 24, :end-line 31, :column 1, :end-column 44}, :id "util/to-matrix-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$to_matrix 0x1c73736f \"util$to_matrix@1c73736f\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/to-matrix-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/to-matrix-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn vec-remove\n  \"Remove element at index on a coll\"\n  [pos coll]\n  (into (subvec coll 0 pos) (subvec coll (inc pos))))", :nextjournal/render-opts {:loc {:line 34, :end-line 37, :column 1, :end-column 54}, :id "util/vec-remove-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$vec_remove 0x47395fa1 \"util$vec_remove@47395fa1\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/vec-remove-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/vec-remove-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn nth-cycling\n  \"Find any element on a cycling vector\"\n  [vector i]\n  (nth vector (mod i (count vector))))", :nextjournal/render-opts {:loc {:line 39, :end-line 42, :column 1, :end-column 39}, :id "util/nth-cycling-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$nth_cycling 0x5f9dd6af \"util$nth_cycling@5f9dd6af\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/nth-cycling-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/nth-cycling-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn parse-out-longs\n  \"Parse out all numbers in `line` that are integers (longs)\"\n  [line]\n  (map parse-long (re-seq #\"[-+]?\\d+\" line)))", :nextjournal/render-opts {:loc {:line 44, :end-line 47, :column 1, :end-column 46}, :id "util/parse-out-longs-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$parse_out_longs 0x6ab3835c \"util$parse_out_longs@6ab3835c\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/parse-out-longs-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/parse-out-longs-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "util/markdown-5du7KW3v3vc6ggMpgsqummDcyYMDUd"} [:p [:<> "Like the core time macro, but rather than printing the elapsed time it"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5dtFMoRpfSur3BJ5RKN8sHB4mECYMZ"}}] [:<> "returns a list of (result, time). Returned value is in milliseconds."]]], :nextjournal/render-opts {:id "util/markdown-5du7KW3v3vc6ggMpgsqummDcyYMDUd"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsjzwxRkivFXiBf1NDMWmH54cVWV1"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defmacro time-it [expr]\n  `(let [start# (. System (nanoTime))\n         ret#   ~expr\n         end#   (/ (double (- (. System (nanoTime)) start#)) 1000000.0)]\n     (list ret# end#)))", :nextjournal/render-opts {:loc {:line 51, :end-line 55, :column 1, :end-column 24}, :id "util/time-it-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$time_it 0x6d5c7d6e \"util$time_it@6d5c7d6e\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/time-it-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/time-it-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn tee\n  \"Like 'tap' or 'tee', show the value of expr before returning it\"\n  [expr]\n  (print expr \"\\n\")\n  expr)", :nextjournal/render-opts {:loc {:line 57, :end-line 61, :column 1, :end-column 8}, :id "util/tee-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$tee 0x6095f333 \"util$tee@6095f333\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/tee-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/tee-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "util/markdown-5drrtxPXW8UXxNGef5ra9Z6D8WWXHq"} [:p [:<> "Taken from "] [:a {:href "https://stackoverflow.com/a/3266877/6421"} [:<> "https://stackoverflow.com/a/3266877/6421"]]] [:p [:<> "Get matches for a given regexp "] [:em [:<> "and"]] [:<> " their position within the string."]]], :nextjournal/render-opts {:id "util/markdown-5drrtxPXW8UXxNGef5ra9Z6D8WWXHq"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsjzwxRkivFXiBf1NDMWmH54cVWV1"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn re-pos\n  \"Return a list of pairs of (index, string) for all matches of `re` in `s`\"\n  [re s]\n  (loop [m   (re-matcher re s)\n         res ()]\n    (if (.find m)\n      (recur m (cons (list (.start m) (.group m)) res))\n      (reverse res))))", :nextjournal/render-opts {:loc {:line 66, :end-line 73, :column 1, :end-column 23}, :id "util/re-pos-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$re_pos 0x518c6920 \"util$re_pos@518c6920\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/re-pos-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/re-pos-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn re-find-pos\n  \"Return a list of pairs of (index, string) for all matches of `re` in `s`\"\n  [re s]\n  (let [m   (re-matcher re s)]\n    (when (.find m)\n      (list (.start m) (.group m)))))", :nextjournal/render-opts {:loc {:line 75, :end-line 80, :column 1, :end-column 38}, :id "util/re-find-pos-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$re_find_pos 0x2753b92e \"util$re_find_pos@2753b92e\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/re-find-pos-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/re-find-pos-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn instaparse [data grammar transform]\n  (->> data\n       ((insta/parser\n         grammar))\n       #_{:clj-kondo/ignore [:unresolved-var]}\n       (insta/transform transform)))", :nextjournal/render-opts {:loc {:line 82, :end-line 87, :column 1, :end-column 37}, :id "util/instaparse-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$instaparse 0x29ea17a7 \"util$instaparse@29ea17a7\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/instaparse-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/instaparse-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn tprint [x]\n  (pprint x)\n  x)", :nextjournal/render-opts {:loc {:line 90, :end-line 92, :column 1, :end-column 5}, :id "util/tprint-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$tprint 0x66a965c2 \"util$tprint@66a965c2\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/tprint-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/tprint-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn spy [d]\n  (println d)\n  d)", :nextjournal/render-opts {:loc {:line 95, :end-line 97, :column 1, :end-column 5}, :id "util/spy-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$spy 0x54ded55e \"util$spy@54ded55e\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/spy-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/spy-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn parse-int\n  ([s]\n   (parse-int s 10))\n  ([s b]\n   (try (Integer/parseInt s b)\n        (catch Exception e nil))))", :nextjournal/render-opts {:loc {:line 99, :end-line 104, :column 1, :end-column 35}, :id "util/parse-int-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$parse_int 0x6e7e8c22 \"util$parse_int@6e7e8c22\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/parse-int-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/parse-int-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn get-session []\n  (or (System/getenv \"AOC_TOKEN\")\n      (let [raw (slurp (str (System/getProperty \"user.home\") \"/.adventofcode.session\"))]\n        (str/replace raw \"\\n\" \"\"))))", :nextjournal/render-opts {:loc {:line 106, :end-line 109, :column 1, :end-column 37}, :id "util/get-session-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$get_session 0x17d0f965 \"util$get_session@17d0f965\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/get-session-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/get-session-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn load-problem\n  \"Given a DAY and a YEAR, cache the problem definition locally. If `AOC_TOKEN`\n  is set correctly, this will pull both parts if you've done part 1.\"\n  [day year]\n  (let [day       (str (parse-long day))\n        file-name (format \"day%s-%s.html\" day year)\n        path      (fs/path (fs/temp-dir) file-name)]\n    (when-not (fs/exists? path)\n      (let [resp (->> {:headers {\"Cookie\" (str \"session=\" (get-session))}}\n                      (client/get (format \"https://adventofcode.com/%s/day/%s\" year day)))]\n        (when (= 200 (:status resp))\n          (spit (str path) (:body resp)))))\n\n    (let [doc   (h/as-hickory (h/parse (slurp (str path))))\n          parts (map #(hr/hickory-to-html %) (s/select (s/child (s/tag :article)) doc))]\n\n      (str (hi/html [:details\n                     [:summary.cursor-pointer\n                      [:span.text-xl.font-bold (str \"Details\")]]\n                     (hi/raw (apply str (mapcat str parts)))])))))", :nextjournal/render-opts {:loc {:line 111, :end-line 130, :column 1, :end-column 67}, :id "util/load-problem-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$load_problem 0x3afa1928 \"util$load_problem@3afa1928\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/load-problem-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/load-problem-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(hi/html [:details\n          [:summary\n           \"2023\"\n           (hi/raw (load-problem \"01\" \"2023\"))]])", :nextjournal/render-opts {:loc {:line 134, :end-line 137, :column 1, :end-column 50}, :id "util/anon-expr-5drb4HwsWJYSLTx5jkEn5NAdthChGE-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[hiccup.util.RawString 0x182c4f0c \"<details><summary>2023<details><summary class=\\\"cursor-pointer\\\"><span class=\\\"text-xl font-bold\\\">Details</span></summary><article class=\\\"day-desc\\\"><h2>--- Day 1: Trebuchet?! ---</h2><p>Something is wrong with global snow production, and you've been selected to take a look. The Elves have even given you a map; on it, they've used stars to mark the top fifty locations that are likely to be having problems.</p>\\n<p>You've been doing this long enough to know that to restore snow operations, you need to check all <em class=\\\"star\\\">fifty stars</em> by December 25th.</p>\\n<p>Collect stars by solving puzzles.  Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first.  Each puzzle grants <em class=\\\"star\\\">one star</em>. Good luck!</p>\\n<p>You try to ask why they can't just use a <a href=\\\"/2015/day/1\\\">weather machine</a> (&quot;not powerful enough&quot;) and where they're even sending you (&quot;the sky&quot;) and why your map looks mostly blank (&quot;you sure ask a lot of questions&quot;) <span title=\\\"My hope is that this abomination of a run-on sentence somehow conveys the chaos of being hastily loaded into a trebuchet.\\\">and</span> hang on did you just say the sky (&quot;of course, where do you think snow comes from&quot;) when you realize that the Elves are already loading you into a <a href=\\\"https://en.wikipedia.org/wiki/Trebuchet\\\" target=\\\"_blank\\\">trebuchet</a> (&quot;please hold still, we need to strap you in&quot;).</p>\\n<p>As they're making the final adjustments, they discover that their calibration document (your puzzle input) has been <em>amended</em> by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.</p>\\n<p>The newly-improved calibration document consists of lines of text; each line originally contained a specific <em>calibration value</em> that the Elves now need to recover. On each line, the calibration value can be found by combining the <em>first digit</em> and the <em>last digit</em> (in that order) to form a single <em>two-digit number</em>.</p>\\n<p>For example:</p>\\n<pre><code>1abc2\\npqr3stu8vwx\\na1b2c3d4e5f\\ntreb7uchet\\n</code></pre>\\n<p>In this example, the calibration values of these four lines are <code>12</code>, <code>38</code>, <code>15</code>, and <code>77</code>. Adding these together produces <code><em>142</em></code>.</p>\\n<p>Consider your entire calibration document. <em>What is the sum of all of the calibration values?</em></p>\\n</article></details></summary></details>\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/anon-expr-5drb4HwsWJYSLTx5jkEn5NAdthChGE-result-1"}}, :nextjournal/blob-id "5dt5L8hGqEGvSV5U9GzNL8vZpzz1Fz"}, :nextjournal/render-opts {:id "util/anon-expr-5drb4HwsWJYSLTx5jkEn5NAdthChGE-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn load-title\n  \"Given a DAY and a YEAR, return the title of the problem.\"\n  [day year]\n  (let [day       (if (number? day) (str day) (str (parse-long day)))\n        file-name (format \"day%s-%s.html\" day year)\n        _         (load-problem day year)\n        path      (fs/path (fs/temp-dir) file-name)\n        doc       (h/as-hickory (h/parse (slurp (str path))))\n        parts     (map #(hr/hickory-to-html %) (s/select (s/child (s/tag :h2)) doc))]\n    (->> parts\n         first\n         (re-find #\"(?<=>--- )(.*)(?= ---<)\")\n         first)))", :nextjournal/render-opts {:loc {:line 139, :end-line 151, :column 1, :end-column 18}, :id "util/load-title-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$load_title 0x2a9dfb7 \"util$load_title@2a9dfb7\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/load-title-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/load-title-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn absolute-distance [s1 s2]\n  (Math/abs (- s1 s2)))", :nextjournal/render-opts {:loc {:line 153, :end-line 154, :column 1, :end-column 24}, :id "util/absolute-distance-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$absolute_distance 0x12a21556 \"util$absolute_distance@12a21556\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/absolute-distance-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/absolute-distance-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn manhattan-distance [v1 v2]\n  (->> (map absolute-distance v1 v2)\n       (reduce +)))", :nextjournal/render-opts {:loc {:line 156, :end-line 158, :column 1, :end-column 20}, :id "util/manhattan-distance-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$manhattan_distance 0x787b7d73 \"util$manhattan_distance@787b7d73\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/manhattan-distance-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/manhattan-distance-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn find-all-paths\n  [graph start end]\n  (letfn [(find-paths [node path]\n            (if (= node end)\n              [path]\n              (apply concat (map #(find-paths %1 (conj path %1))\n                                 (remove #(contains? (set path) %) (uber/successors graph node))))))]\n    (find-paths start [start])))", :nextjournal/render-opts {:loc {:line 160, :end-line 167, :column 1, :end-column 33}, :id "util/find-all-paths-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$find_all_paths 0x2d5195f \"util$find_all_paths@2d5195f\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/find-all-paths-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/find-all-paths-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn assoc-at [data i item]\n  (if (associative? data)\n    (assoc data i item)\n    (if-not (neg? i)\n      (letfn [(assoc-lazy [i data]\n                (cond (zero? i) (cons item (rest data))\n                      (empty? data) data\n                      :else (lazy-seq (cons (first data)\n                                            (assoc-lazy (dec i) (rest data))))))]\n        (assoc-lazy i data))\n      data)))", :nextjournal/render-opts {:loc {:line 169, :end-line 179, :column 1, :end-column 14}, :id "util/assoc-at-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$assoc_at 0x4ecd2ad5 \"util$assoc_at@4ecd2ad5\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/assoc-at-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/assoc-at-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def star\n  [:span {:class \"text-right font-bold text-xl\"} \"*\"])", :nextjournal/render-opts {:loc {:line 181, :end-line 182, :column 1, :end-column 55}, :id "util/star-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [{:path [1 0], :nextjournal/value :span, :nextjournal/viewer {:name nextjournal.clerk.viewer/keyword-viewer, :render-fn #viewer-fn (fn [x] [:span.cmt-atom.inspected-value (str x)]), :hash "5duGajFTnAgGjfawvq1FBKha12ZHyw"}} {:path [1 1], :nextjournal/value [{:path [1 1 0], :nextjournal/value [{:path [1 1 0 0], :nextjournal/value :class, :nextjournal/viewer {:name nextjournal.clerk.viewer/keyword-viewer, :render-fn #viewer-fn (fn [x] [:span.cmt-atom.inspected-value (str x)]), :hash "5duGajFTnAgGjfawvq1FBKha12ZHyw"}} {:path [1 1 0 1], :nextjournal/value "text-right font-bold text-xl", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\"" "}"), :page-size 80, :hash "5dsoVKnSNgnKXj1Cv4qvD6xr6wMks7"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/map-entry-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (comp (nextjournal.clerk.render/inspect-children opts) (interpose " ")) xs)), :page-size 2, :hash "5droUthZ6BBTwumLFMkuWhk1rT3hT3"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/map-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-map, :opening-paren "{", :page-size 10, :hash "5drSiYgxwbGAGQx15hZm4Ts9vK16be"}} {:path [1 2], :nextjournal/value "*", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\"" "]"), :page-size 80, :hash "5dsoVKnSNgnKXj1Cv4qvD6xr6wMks7"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/vector-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "[", :page-size 20, :hash "5dsPqhnXQ6NY7bfSdVZe5SH2Voaoff"}, :nextjournal/render-opts {:id "util/star-result-1"}}, :nextjournal/blob-id "5dtxZvi3tg5Wn1UCZ3UVnXxGkpabD5"}, :nextjournal/render-opts {:id "util/star-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn list-problems [year days]\n  (clerk/html\n   [:div.flex.flex-col.gap-4\n    (for [[day {:keys [stars]}] (sort days)\n          :let                  [title (load-title day year)]]\n      [:div.flex.flex-row.gap-4\n       [:div {:class (str \"flex basis-[30px] items-center justify-end \"\n                          (if (>= stars 2) \"text-yellow-300\"  \"text-yellow-100\"))}\n        (repeat stars star)]\n       [:a {:href (clerk/doc-url (str \"src/aoc/\" year \"/\" (format \"%02d\" day)))}\n        title]\n       [:div]])]))", :nextjournal/render-opts {:loc {:line 184, :end-line 195, :column 1, :end-column 19}, :id "util/list-problems-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dtogCRMFvgKZ3gMGuwZAef65oxRZD"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$list_problems 0x4cc78eff \"util$list_problems@4cc78eff\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5du3nEWKL6ov9p2VcYkP5JLW7a9Hwz"}, :nextjournal/render-opts {:id "util/list-problems-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/list-problems-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dryaWFamQn5VBuSHLJXGpfgbLUTKh"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dsWKftfXoMH5MoEKXW5MiBzzAwoCU"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5dsiHybTyGGTEpReRaV7nfNxoDgnKx"}}